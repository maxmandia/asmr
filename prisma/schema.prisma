
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id                      String     @id @unique
  email                   String     @unique
  first_name              String?
  last_name               String?
  profile_picture_url     String?    @db.VarChar(500)
  profile_header_url      String?    @db.VarChar(500)
  handle                  String     @unique
  stripe_customer_id      String     @unique
  following               Follow[]   @relation("UserFollows")
  followers               Follow[]   @relation("UserFollowedBy")
  posts                   Post[]
  subscriber              Subscription[] @relation("TheUserBeingSubscribedTo")
  subscribedTo            Subscription[] @relation("TheUserSubscribing")
  messagesSent            Message[]  @relation("UserSendsMessage")
  messagesReceived        Message[]  @relation("UserReceivesMessage")
  subscriptionSetting     SubscriptionSetting?
}

model Post {
  id             Int        @id @default(autoincrement())
  userId         String     
  createdAt      DateTime   @default(now())
  isPaid         Boolean    @default(true)
  image          String?    @unique @db.VarChar(500)
  video          String?    @unique @db.VarChar(500)
  caption        String?    @db.VarChar(1000)
  fileKey        String?    @unique    
  user           User       @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Follow {
  id                      Int        @id @default(autoincrement())
  followerId              String     
  followingId             String     
  createdAt               DateTime   @default(now())
  follower                User       @relation("UserFollows", fields: [followerId], references: [id])
  following               User       @relation("UserFollowedBy", fields: [followingId], references: [id])

  @@index([followerId])
  @@index([followingId])
  @@unique([followerId, followingId]) 
}

model Subscription {
  id                      Int        @id @default(autoincrement())
  subscriberId            String     
  subscribedToId          String     
  createdAt               DateTime   @default(now())
  subscriber              User       @relation("TheUserSubscribing", fields: [subscriberId], references: [id])
  subscribedTo            User       @relation("TheUserBeingSubscribedTo", fields: [subscribedToId], references: [id])

  @@index([subscriberId])
  @@index([subscribedToId])
  @@unique([subscriberId, subscribedToId]) 
}

model SubscriptionSetting {
  id                      Int        @id @default(autoincrement())
  userId                  String     @unique
  createdAt               DateTime   @default(now())
  connectAccountId        String
  isComplete              Boolean    @default(false) // if the connectAccount is completed
  productId               String?  
  priceId                 String?
  price                   Int?
  user                    User       @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Message {
  id                      Int        @id @default(autoincrement())
  senderId                String     
  receiverId              String     
  createdAt               DateTime   @default(now())
  message                 String?
  sender                  User       @relation("UserSendsMessage", fields: [senderId], references: [id])
  receiver                User       @relation("UserReceivesMessage", fields: [receiverId], references: [id])
  isTip                   Boolean
  tipPrice                String?
  wasRead                 Boolean    @default(false)
  wasNotified             Boolean    @default(false)
  
  @@index([senderId])
  @@index([receiverId])
}

model Waitlist {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  createdAt      DateTime   @default(now())
}

